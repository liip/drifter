# -*- mode: ruby -*-
# vi: set ft=ruby :

# Please do not edit this file directly as this is most probably a symbolic
# link to the rawbot-virtualization submodule. You can customize your Vagrant
# box by editing the following files :
#
#   * virtualization/parameters.yml for project related parameters
#   * virtualization/playbook.yml for provisioning option
#   * virtualization/VagrantfileExtra.rb should you need anything else
#
# If those options are not enough for you, please get in touch so we can
# devise something reusable for everyone !

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

# add a 'get' method to our config class
class CustomConfig
    def get(name, default = nil)
        if self.respond_to?(name)
            self.send(name)
        elsif default.nil?
            raise "[CONFIG ERROR] '#{name}' cannot be found and no default provided."
        else
            default
        end
    end
end

custom_config = CustomConfig.new

ansible_provisioner = custom_config.get('ansible_local', false) ? 'ansible_local' : 'ansible'

if ansible_provisioner == 'ansible_local'
    Vagrant.require_version ">= 1.8.1"
else
    Vagrant.require_version ">= 1.6.2"
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
    config.vm.box = custom_config.get('vbox_box_name', 'jessie64')
    config.vm.box_url = custom_config.get('vbox_box_url', 'http://vagrantbox-public.liip.ch/liip-jessie64.box')
    config.vm.hostname = custom_config.get('hostname')

    config.vm.network "forwarded_port", guest: 80, host: 8080, auto_correct: true

    config.ssh.forward_agent = true
    config.ssh.forward_x11 = true

    if Vagrant.has_plugin?("vagrant-hostmanager")
        config.hostmanager.enabled = true
        config.hostmanager.manage_host = true
        config.hostmanager.ignore_private_ip = false
        config.hostmanager.include_offline = true
        config.hostmanager.aliases = custom_config.get('load_aliases', [])
    end

    config.vm.provider "virtualbox" do |v, override|
        override.vm.network :private_network, ip: custom_config.get('box_ip')
        override.vm.synced_folder ".", "/vagrant", type: "nfs", mount_options: ['noatime', 'noacl', 'proto=udp', 'vers=3', 'async', 'actimeo=1']

        v.memory = 4096
        v.cpus = 2
        v.customize ["modifyvm", :id, "--natdnsproxy1", "off"]
        v.customize ["modifyvm", :id, "--natdnshostresolver1", "off"]
    end

    config.vm.provider "lxc" do |lxc, override|
        override.vm.box = custom_config.get('lxc_box_name', 'jessie64-lxc')
        override.vm.box_url = custom_config.get('lxc_box_url', 'http://vagrantbox-public.liip.ch/liip-jessie64-lxc.box')

        if Vagrant.has_plugin?("vagrant-hostmanager")
            override.hostmanager.ignore_private_ip = true
        end
    end

    config.vm.provision ansible_provisioner do |ansible|
        ansible.extra_vars = custom_config.get('extra_vars', {})
        ansible.playbook = custom_config.get('playbook', 'virtualization/playbook.yml')

        # force handlers to run even on playbook errors
        ansible.raw_arguments = ['--force-handlers']

        # Update verbosity as needed, multiples 'v' means more verbose
        # ansible.verbose = 'v'

        if ansible_provisioner == 'ansible'
            ansible.host_key_checking = false
            # We can't use controlmaster because it makes SSH use the same
            # connection over and over again. This clashes with the base role which
            # changes sshd configuration. If controlmaster is used, the new sshd
            # configuration is not taken into account
            ansible.raw_ssh_args = ['-o ControlMaster=no']
        else
            # try to install ansible in the box so that we don't have to recreate them
            ansible.install = true
        end
    end
end
